// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "jieggii",
            "url": "https://github.com/jieggii"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/groshi-project/groshi/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user": {
            "get": {
                "description": "Returns information about the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Retrieve information about the current user",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/handler.userGetResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user and returns its username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.userCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/handler.userCreateResponse"
                        }
                    },
                    "409": {
                        "description": "User with such username already exists",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the current user and returns its username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete the current user",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/handler.userDeleteResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errresp.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errresp.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string",
                    "example": "today is a sunny day so I decided to go for a walk instead of serving your requests"
                }
            }
        },
        "handler.userCreateParams": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "my-secret-password"
                },
                "username": {
                    "type": "string",
                    "example": "jieggii"
                }
            }
        },
        "handler.userCreateResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "jieggii"
                }
            }
        },
        "handler.userDeleteResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "jieggii"
                }
            }
        },
        "handler.userGetResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "jieggii"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "JWT",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "groshi",
	Description:      "ðŸ“‰ groshi - damn simple tool to keep track of your finances.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
