definitions:
  models.Currency:
    properties:
      code:
        example: USD
        type: string
      symbol:
        example: $
        type: string
    type: object
  models.Error:
    properties:
      error_details:
        items:
          type: string
        type: array
      error_message:
        example: example error message
        type: string
    type: object
  models.Summary:
    properties:
      currency:
        example: USD
        type: string
      income:
        example: 5000
        type: integer
      outcome:
        example: 1000
        type: integer
      total:
        example: 4000
        type: integer
      transactions_count:
        example: 6
        type: integer
    type: object
  models.Transaction:
    properties:
      amount:
        example: -999
        type: integer
      created_at:
        example: "2023-09-02T12:38:10Z"
        type: string
      currency:
        example: USD
        type: string
      description:
        example: Bought some donuts for $9.99...
        type: string
      timestamp:
        example: "2023-09-02T12:38:10Z"
        type: string
      updated_at:
        example: "2023-09-02T12:38:10Z"
        type: string
      uuid:
        example: c81ab774-3f96-40e8-9ebd-170e303a682e
        type: string
    type: object
  models.User:
    properties:
      username:
        example: pipka5000
        type: string
    type: object
info:
  contact: {}
  description: "\U0001F4C9 groshi - goddamn simple tool to keep track of your finances."
  license:
    name: Licensed under MIT license.
    url: https://github.com/groshi-project/groshi/tree/master/LICENSE
  title: groshi HTTP API documentation
  version: 0.1.0
paths:
  /currencies:
    get:
      consumes:
      - application/json
      description: Returns array of available currencies.
      produces:
      - application/json
      responses:
        "200":
          description: An array of objects that includes currency codes in the ISO-4217
            format along with their respective symbols.
          schema:
            items:
              $ref: '#/definitions/models.Currency'
            type: array
      summary: retrieve an array of available currencies
      tags:
      - currencies
  /transactions:
    get:
      consumes:
      - application/json
      description: Returns array of transactions for given time period.
      parameters:
      - description: Beginning of the time period in RFC-3339 format.
        in: query
        name: start_time
        required: true
        type: string
      - description: End of the time period in RFC-3339 format (current time is used
          by default if no value provided).
        in: query
        name: end_time
        type: string
      - description: The currency to convert amount to.
        in: query
        name: currency
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Array of transaction objects is returned.
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
      summary: fetch many transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Creates a new transaction owned by current user.
      parameters:
      - description: Negative or positive amount of transaction in minor units.
        in: body
        name: amount
        required: true
        schema:
          type: integer
      - description: Currency code of transaction in ISO-4217 format.
        in: body
        name: currency
        required: true
        schema:
          type: string
      - description: Description of transaction.
        in: body
        name: description
        schema:
          type: string
      - description: Timestamp of transaction in RFC-3339 format.
        in: body
        name: timestamp
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Object of newly created transaction is returned.
          schema:
            $ref: '#/definitions/models.Transaction'
      summary: create a new transaction
      tags:
      - transactions
  /transactions/{uuid}:
    delete:
      consumes:
      - application/json
      description: Deletes transaction.
      parameters:
      - description: UUID of transaction.
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted transaction object is returned.
          schema:
            $ref: '#/definitions/models.Transaction'
        "403":
          description: You have no right to delete the transaction.
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Transaction was not found.
          schema:
            $ref: '#/definitions/models.Error'
      summary: delete transaction
      tags:
      - transactions
    get:
      consumes:
      - application/json
      description: Returns information about one transaction.
      parameters:
      - description: UUID of transaction.
        in: path
        name: uuid
        required: true
        type: string
      - description: The currency to convert amount to
        in: query
        name: currency
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction object is returned.
          schema:
            $ref: '#/definitions/models.Transaction'
        "403":
          description: You have no right to read this transaction.
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Transaction was not found.
          schema:
            $ref: '#/definitions/models.Error'
      summary: fetch one transaction
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Updates transaction.
      parameters:
      - description: UUID of transaction.
        in: path
        name: uuid
        required: true
        type: string
      - description: New negative or positive amount of transaction in minor units.
        in: body
        name: new_amount
        schema:
          type: integer
      - description: New currency of transaction in ISO-4217 format.
        in: body
        name: new_currency
        schema:
          type: string
      - description: New description of transaction.
        in: body
        name: new_description
        schema:
          type: string
      - description: New timestamp of transaction in RFC-3339 format.
        in: body
        name: new_timestamp
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated transaction object is returned.
          schema:
            $ref: '#/definitions/models.Transaction'
        "403":
          description: You have no right to update the transaction.
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Transaction was not found.
          schema:
            $ref: '#/definitions/models.Error'
      summary: update transaction
      tags:
      - transactions
  /transactions/summary:
    get:
      consumes:
      - application/json
      description: Returns summary of transactions for given time period in desired
        currency units.
      parameters:
      - description: Beginning of the time period in RFC-3339 format.
        in: query
        name: start_time
        required: true
        type: string
      - description: Desired currency of sum of transactions in ISO-4217 format.
        in: query
        name: currency
        required: true
        type: string
      - description: End of the time period in RFC-3339 format (current time is used
          by default if no value provided).
        in: query
        name: end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Summary object is returned.
          schema:
            $ref: '#/definitions/models.Summary'
      summary: fetch summary of transactions for given time period
      tags:
      - transactions
  /user:
    delete:
      consumes:
      - application/json
      description: Deletes current user.
      produces:
      - application/json
      responses:
        "200":
          description: Object of deleted user is returned.
          schema:
            $ref: '#/definitions/models.User'
      summary: delete current user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Returns information about current user.
      produces:
      - application/json
      responses:
        "200":
          description: Information about current user is returned.
          schema:
            $ref: '#/definitions/models.User'
      summary: get information about current user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Creates a new user.
      parameters:
      - description: Username for new user.
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password for new user.
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Username of the newly created user is returned.
          schema:
            $ref: '#/definitions/models.User'
        "409":
          description: User with such username already exists.
          schema:
            $ref: '#/definitions/models.Error'
      summary: create a new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates username and/or password of current user.
      produces:
      - application/json
      responses:
        "200":
          description: Information about current user is returned.
          schema:
            $ref: '#/definitions/models.User'
      summary: update current user
      tags:
      - user
swagger: "2.0"
