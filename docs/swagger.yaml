definitions:
  handler.authLoginParams:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handler.authLoginResponse:
    properties:
      expires:
        example: "2034-03-20T12:57:38+02:00"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IldlbGwsIGlmIHlvdSBjYW4gcmVhZCB0aGlzLCB0aGVuIHlvdSBkZWZpbmV0ZWx5IHdvdWxkIGxpa2UgdGhpcyBvbmU6IGh0dHBzOi8veW91dHUuYmUvZFF3NHc5V2dYY1EifQ.1ervhGZz1m6xiHR447rbwh8W1sfATF2qYudOtNWhkkw
        type: string
    type: object
  handler.categoriesCreateParams:
    properties:
      name:
        example: Transport
        type: string
    required:
    - name
    type: object
  handler.categoriesCreateResponse:
    properties:
      uuid:
        example: c319d169-c7bd-4768-b61c-07f796dce3a2
        type: string
    type: object
  handler.categoriesGetResponseItem:
    properties:
      name:
        example: Transport
        type: string
      uuid:
        example: 8b95b038-8a7a-4cdc-96b5-506101ed3a73
        type: string
    type: object
  handler.transactionsCreateParams:
    properties:
      amount:
        example: 2500
        type: integer
      category:
        example: 02983837-7ab0-492a-90b6-285491936067
        type: string
      currency:
        example: USD
        type: string
      description:
        example: Bought a donut for $2.5 only!
        type: string
      timestamp:
        example: todo-timestamp
        type: string
    required:
    - amount
    - currency
    - timestamp
    type: object
  handler.transactionsCreateResponse:
    properties:
      uuid:
        example: 3be1ed0a-c307-49de-872e-38730200f301
        type: string
    type: object
  handler.userCreateParams:
    properties:
      password:
        example: my-secret-password
        type: string
      username:
        example: username
        type: string
    required:
    - password
    - username
    type: object
  handler.userCreateResponse:
    properties:
      username:
        example: username
        type: string
    type: object
  handler.userDeleteResponse:
    properties:
      username:
        example: jieggii
        type: string
    type: object
  handler.userGetResponse:
    properties:
      username:
        example: jieggii
        type: string
    type: object
  model.Error:
    properties:
      error_message:
        example: example error message (who cares)
        type: string
    type: object
info:
  contact: {}
  description: "\U0001F4C9 groshi - damn simple tool to keep track of your finances."
  license:
    name: MIT
    url: https://github.com/groshi-project/groshi/blob/master/LICENSE
  title: groshi
  version: 0.1.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user, generates and returns valid JSON Web Token
      parameters:
      - description: Username and password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.authLoginParams'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.authLoginResponse'
        "400":
          description: Invalid request body format or invalid request params
          schema:
            $ref: '#/definitions/model.Error'
        "403":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Authenticate user
      tags:
      - auth
  /categories:
    get:
      consumes:
      - application/json
      description: Returns all categories created by user.
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            items:
              $ref: '#/definitions/handler.categoriesGetResponseItem'
            type: array
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - Bearer: []
      summary: Fetch all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Creates a new category and returns its UUID
      parameters:
      - description: Category name
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.categoriesCreateParams'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.categoriesCreateResponse'
        "400":
          description: Invalid request body format or invalid request params
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - categories
  /transactions:
    post:
      consumes:
      - application/json
      description: Creates a new transaction and returns its UUID
      parameters:
      - description: Transaction
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.transactionsCreateParams'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.transactionsCreateResponse'
        "400":
          description: Invalid request body format or invalid request params
          schema:
            $ref: '#/definitions/model.Error'
        "403":
          description: Access to the category is forbidden
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - Bearer: []
      summary: Create a new transaction
      tags:
      - transactions
  /user:
    delete:
      consumes:
      - application/json
      description: Deletes the current user and returns its username
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.userDeleteResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - Bearer: []
      summary: Delete the current user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Returns information about the current user
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.userGetResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - Bearer: []
      summary: Retrieve information about the current user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Creates a new user and returns its username
      parameters:
      - description: Username and password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.userCreateParams'
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/handler.userCreateResponse'
        "400":
          description: Invalid request body format or invalid request params
          schema:
            $ref: '#/definitions/model.Error'
        "409":
          description: User with such username already exists
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Create a new user
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
